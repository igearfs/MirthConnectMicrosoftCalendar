<codeTemplateLibrary version="4.5.2">
  <id>86fefdf1-c61b-4567-a0aa-ee620ab853bc</id>
  <name>Outlook</name>
  <revision>12</revision>
  <lastModified>
    <time>1741643353791</time>
    <timezone>America/Chicago</timezone>
  </lastModified>
  <description></description>
  <includeNewChannels>false</includeNewChannels>
  <enabledChannelIds/>
  <disabledChannelIds>
    <string>848ffa6d-b09f-41b3-9815-224bb3838446</string>
    <string>62d31a3f-45a9-4fa4-afa3-16110eb6a948</string>
    <string>248713d0-fae1-4260-8976-28015cf67f22</string>
  </disabledChannelIds>
  <codeTemplates>
    <codeTemplate version="4.5.2">
      <id>f169f44b-e1ce-40ef-8a3e-7924b9f91e22</id>
      <name>createMicrosoftCalendarEvent</name>
      <revision>4</revision>
      <lastModified>
        <time>1741650440307</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} accessToken - arg1 description
	@param {String} userId - arg2 description
	@param {String} event - arg3 description
	
	@return {String} return eventId
*/
function createMicrosoftCalendarEvent(accessToken, userId, event) {
//	logger.info(&quot;In createEvent&quot;);
//	logger.info(&quot;*****************************************************************************************************&quot;);
    if (!accessToken || accessToken.trim() === &quot;&quot;) {
        logger.error(&quot;‚ùå Access token is missing or empty!&quot;);
        return null;
    }

    if (!userId) {
        logger.error(&quot;‚ùå Cannot create event without a valid user ID.&quot;);
        return null;
    }

    var calendarUrl = &quot;https://graph.microsoft.com/v1.0/users/&quot; + encodeURIComponent(userId) + &quot;/events&quot;;


    var HttpClients = Packages.org.apache.http.impl.client.HttpClients;
    var HttpPost = Packages.org.apache.http.client.methods.HttpPost;
    var StringEntity = Packages.org.apache.http.entity.StringEntity;
    var EntityUtils = Packages.org.apache.http.util.EntityUtils;

    try {
        var httpClient = HttpClients.createDefault();
        var httpPost = new HttpPost(calendarUrl);

        // üîπ Trim Access Token and Set Headers
        var cleanToken = accessToken.trim();
        httpPost.setHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + cleanToken);
        httpPost.setHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);
        httpPost.setEntity(new StringEntity(JSON.stringify(event), &quot;UTF-8&quot;));

        // ‚úÖ Log Debug Info Before Sending
//        logger.info(&quot;üìå Sending Request to: &quot; + calendarUrl);
//        logger.info(&quot;üîë Authorization Header: Bearer &quot; + cleanToken);
//        logger.info(&quot;üì§ Request Body: &quot; + JSON.stringify(event, null, 2));

        var response = httpClient.execute(httpPost);
        var responseString = EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);
        var responseJson = JSON.parse(responseString);
        
//        logger.info(&quot;RESPONSE CREATE::&quot; + responseString);

        if (responseJson.id) {
            var eventId = responseJson.id;
//            logger.info(&quot;‚úÖ Event Created Successfully!&quot;);
//            logger.info(&quot;üîπ Event ID: &quot; + eventId);
//            logger.info(&quot;üîπ Web Link: &quot; + responseJson.webLink);
            return eventId;
        } else {
            logger.error(&quot;‚ùå Error: Event ID not found.&quot;);
            logger.error(&quot;üîç Full Response: &quot; + responseString);
            return null;
        }
    } catch (e) {
        logger.error(&quot;‚ùå Exception: &quot; + e);
        return null;
    }
}</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="4.5.2">
      <id>a0e23dfb-d744-4573-8930-5adef6f4b06d</id>
      <name>deleteMicrosoftCalendarEvent</name>
      <revision>4</revision>
      <lastModified>
        <time>1741650440313</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} accessToken - accessToken description
	@param {String} userId - userId description
	@param {String} eventId - eventId description
	
	@return {String} return description
*/
function deleteMicrosoftCalendarEvent(accessToken, userId, eventId) {
    if (!accessToken || !userId || !eventId) {
        logger.error(&quot;‚ùå Missing required parameters: accessToken, userId, or eventId.&quot;);
        return;
    }

    var deleteUrl = &quot;https://graph.microsoft.com/v1.0/users/&quot; + encodeURIComponent(userId) + &quot;/events/&quot; + encodeURIComponent(eventId);

    var HttpClients = Packages.org.apache.http.impl.client.HttpClients;
    var HttpDelete = Packages.org.apache.http.client.methods.HttpDelete;
    var EntityUtils = Packages.org.apache.http.util.EntityUtils;

    try {
        var httpClient = HttpClients.createDefault();
        var httpDelete = new HttpDelete(deleteUrl);

        httpDelete.setHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + accessToken.trim());
        httpDelete.setHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);

//        logger.info(&quot;üìå Sending DELETE request to: &quot; + deleteUrl);

        var response = httpClient.execute(httpDelete);
        var statusCode = response.getStatusLine().getStatusCode();

        if (statusCode === 204) {
            logger.info(&quot;‚úÖ Event Deleted Successfully!&quot;);
        } else {
            var responseString = EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);
            logger.error(&quot;‚ùå Error Deleting Event: &quot; + responseString);
        }
    } catch (e) {
        logger.error(&quot;‚ùå Exception while deleting: &quot; + e);
    }
}</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="4.5.2">
      <id>2c7dcb78-da69-4557-bd17-a7c3e4db114a</id>
      <name>findMicrosfotCalendarEventByCustomTransactionId</name>
      <revision>5</revision>
      <lastModified>
        <time>1741650440317</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} accessToken - arg1 description
	@param {String} userId - arg1 description
	@param {String} transactionId - arg1 description
	
	@return {String} return description
*/
function findMicrosfotCalendarEventByCustomTransactionId(accessToken, userId, transactionId) {


	// Import Apache HttpClient classes
	var HttpClients = Packages.org.apache.http.impl.client.HttpClients;
	var HttpPost = Packages.org.apache.http.client.methods.HttpPost;
	var StringEntity = Packages.org.apache.http.entity.StringEntity;
	var EntityUtils = Packages.org.apache.http.util.EntityUtils;

	
    var filterQuery = &quot;categories/any(a:a eq &apos;&quot; + transactionId + &quot;&apos;)&quot;;
    var encodedFilterQuery = encodeURIComponent(filterQuery); // Encode the whole filter query

    var searchUrl = &quot;https://graph.microsoft.com/v1.0/users/&quot; 
        + encodeURIComponent(userId) 
        + &quot;/events?$filter=&quot; + encodedFilterQuery; // ‚úÖ Use encoded filter

    var HttpClients = Packages.org.apache.http.impl.client.HttpClients;
    var HttpGet = Packages.org.apache.http.client.methods.HttpGet;
    var EntityUtils = Packages.org.apache.http.util.EntityUtils;

    try {
        var httpClient = HttpClients.createDefault();
        var httpGet = new HttpGet(searchUrl);
        httpGet.setHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + accessToken);
        httpGet.setHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);

        var response = httpClient.execute(httpGet);
        var responseString = EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);
        var responseJson = JSON.parse(responseString);

        // üîç Log the full response for debugging
//        logger.info(&quot;üîç FULL RESPONSE: &quot; + responseString);

        if (responseJson.value &amp;&amp; responseJson.value.length &gt; 0) {
            var eventId = responseJson.value[0].id;
//            logger.info(&quot;‚úÖ Event Found! ID: &quot; + eventId);
            return eventId;
        } else {
            logger.error(&quot;‚ùå No matching event found.&quot;);
            return null;
        }
    } catch (e) {
        logger.error(&quot;‚ùå Exception while retrieving Event ID: &quot; + e);
        return null;
    }
}</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="4.5.2">
      <id>fb3bc8a4-2762-4375-84df-955e44a0d1ad</id>
      <name>getMicrosoftAccessToken</name>
      <revision>8</revision>
      <lastModified>
        <time>1741642270815</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} clientId - arg1 description
	@param {String} clientId - arg1 description
	@param {String} clientId - arg1 description
	
	@return {String} return access token for oauth2
*/

function getMicrosoftAccessToken(clientId, clientSecret, tenantId) {

	var scope = &quot;https://graph.microsoft.com/.default&quot;;  // üîπ Graph API scope

	// Microsoft OAuth 2.0 Token URL
	var tokenUrl = &quot;https://login.microsoftonline.com/&quot; + tenantId + &quot;/oauth2/v2.0/token&quot;; 

	// Import Apache HttpClient classes
	var HttpClients = Packages.org.apache.http.impl.client.HttpClients;
	var HttpPost = Packages.org.apache.http.client.methods.HttpPost;
	var StringEntity = Packages.org.apache.http.entity.StringEntity;
	var EntityUtils = Packages.org.apache.http.util.EntityUtils;

	
	try {
	   var httpClient = HttpClients.createDefault();
	   var httpPost = new HttpPost(tokenUrl);
	   httpPost.setHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);
	
	   // üî• Request body for client credentials grant
	   var postData = &quot;client_id=&quot; + encodeURIComponent(clientId) +
	                  &quot;&amp;client_secret=&quot; + encodeURIComponent(clientSecret) +
	                  &quot;&amp;scope=&quot; + encodeURIComponent(scope) +
	                  &quot;&amp;grant_type=client_credentials&quot;;
	
	   httpPost.setEntity(new StringEntity(postData, &quot;UTF-8&quot;));
	
	   var response = httpClient.execute(httpPost);
	   var responseString = EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);
	   var responseJson = JSON.parse(responseString);
//	   logger.info(&quot;response: &quot; + responseString);
	   if (responseJson.access_token) {
//	       logger.info(&quot;‚úÖ Access Token Received: &quot; + responseJson.access_token);
	       return responseJson.access_token;
	   } else {
	       logger.error(&quot;‚ùå Error getting access token: &quot; + responseString);
	       return null;
	   }
	} catch (e) {
	   logger.error(&quot;‚ùå Exception: &quot; + e);
	   return null;
	}
}</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="4.5.2">
      <id>e690620f-688c-46d8-adc0-85da23af2119</id>
      <name>getMicrosoftUserId</name>
      <revision>3</revision>
      <lastModified>
        <time>1741639012305</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getMicrosoftUserId(accessToken, userEmail) {


	// Import Apache HttpClient classes
	var HttpClients = Packages.org.apache.http.impl.client.HttpClients;
	var HttpPost = Packages.org.apache.http.client.methods.HttpPost;
	var StringEntity = Packages.org.apache.http.entity.StringEntity;
	var EntityUtils = Packages.org.apache.http.util.EntityUtils;
	
    var URLEncoder = Packages.java.net.URLEncoder;
    var charset = &quot;UTF-8&quot;;

    // üîπ Correctly encode the query parameter
    var encodedFilter = URLEncoder.encode(&quot;mail eq &apos;&quot; + userEmail + &quot;&apos;&quot;, charset);
    var userLookupUrl = &quot;https://graph.microsoft.com/v1.0/users?$filter=&quot; + encodedFilter;

    var HttpClients = Packages.org.apache.http.impl.client.HttpClients;
    var HttpGet = Packages.org.apache.http.client.methods.HttpGet;
    var EntityUtils = Packages.org.apache.http.util.EntityUtils;

    try {
        var httpClient = HttpClients.createDefault();
        var httpGet = new HttpGet(userLookupUrl);
        httpGet.setHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + accessToken);
        httpGet.setHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);

        var response = httpClient.execute(httpGet);
        var responseString = EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);
        var responseJson = JSON.parse(responseString);

        // üîπ Check if the user exists in the response
        if (responseJson.value &amp;&amp; responseJson.value.length &gt; 0) {
            var userId = responseJson.value[0].id;
//            logger.info(&quot;‚úÖ User ID Retrieved: &quot; + userId);
            return userId;
        } else {
            logger.error(&quot;‚ùå User not found in directory: &quot; + responseString);
            return null;
        }
    } catch (e) {
        logger.error(&quot;‚ùå Exception while getting User ID: &quot; + e);
        return null;
    }
}</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="4.5.2">
      <id>2399a629-3fbd-4e91-a139-ddf1a782b2b5</id>
      <name>updateMicrosoftCalendarEvent</name>
      <revision>5</revision>
      <lastModified>
        <time>1741650440324</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} accessToken - arg1 description
	@param {String} userId - arg1 description
	@param {String} eventId - arg1 description
	@param {String} updatedEventData - arg1 description
	
	@return {String} return description
*/
function updateMicrosoftCalendarEvent(accessToken, userId, eventId, updatedEventData) {

	// Import Apache HttpClient classes
	var HttpClients = Packages.org.apache.http.impl.client.HttpClients;
	var HttpPost = Packages.org.apache.http.client.methods.HttpPost;
	var StringEntity = Packages.org.apache.http.entity.StringEntity;
	var EntityUtils = Packages.org.apache.http.util.EntityUtils;
	
    if (!accessToken || !userId || !eventId) {
        logger.error(&quot;‚ùå Missing required parameters: accessToken, userId, or eventId.&quot;);
        return;
    }

    var updateUrl = &quot;https://graph.microsoft.com/v1.0/users/&quot; + encodeURIComponent(userId) + &quot;/events/&quot; + encodeURIComponent(eventId);

    var HttpClients = Packages.org.apache.http.impl.client.HttpClients;
    var HttpPatch = Packages.org.apache.http.client.methods.HttpPatch;
    var StringEntity = Packages.org.apache.http.entity.StringEntity;
    var EntityUtils = Packages.org.apache.http.util.EntityUtils;

    try {
        var httpClient = HttpClients.createDefault();
        var httpPatch = new HttpPatch(updateUrl);

        httpPatch.setHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + accessToken.trim());
        httpPatch.setHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);
        httpPatch.setEntity(new StringEntity(JSON.stringify(updatedEventData), &quot;UTF-8&quot;));

//        logger.info(&quot;üìå Sending PATCH request to: &quot; + updateUrl);
//        logger.info(&quot;üì§ Request Body: &quot; + JSON.stringify(updatedEventData, null, 2));

        var response = httpClient.execute(httpPatch);
        var responseString = EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);

        if (response.getStatusLine().getStatusCode() === 200) {
            logger.info(&quot;‚úÖ Event Updated Successfully!&quot;);
        } else {
            logger.error(&quot;‚ùå Error Updating Event: &quot; + responseString);
        }
    } catch (e) {
        logger.error(&quot;‚ùå Exception while updating: &quot; + e);
    }
}</code>
      </properties>
    </codeTemplate>
  </codeTemplates>
</codeTemplateLibrary>